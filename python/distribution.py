#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Apr 23 20:18:23 2022

@author: ferdinand
"""
import argparse
import numpy as np
import matrix, rpta, symmetric
import matplotlib.pyplot as plt
import json
import sys

# from math import ceil
from sys import stderr
from scipy.io import mmread

from main_random import main_random
from main_cond_coarse import main_cond_coarse
from main_static import main_static
# from main_rows import main_rows


def setup(mtx_id, N_fine, gen_x_fine):
    a_fine, b_fine, c_fine = matrix.scipy_matrix_to_bands(mmread(mtx_id))
    mtx = matrix.bands_to_numpy_matrix(a_fine, b_fine, c_fine)

    x_fine = gen_x_fine(N_fine)
    d_fine = np.matmul(mtx, x_fine)
    
    return a_fine, b_fine, c_fine, x_fine, d_fine, mtx


# From a series of samples, select a sample based on a criterion (minimum forward error,
# condition of coarse system, or relative residual)
def generate_min_partition(generator, extractor):
    min_fre, min_fre_part = np.Inf, []
    min_cond, min_cond_part = np.Inf, []
    min_res, min_res_part = np.Inf, []

    for sample in generator:
        _sol, _fre, _res, _coarse, _cond_coarse, _part = extractor(sample)
        
        if _fre < min_fre:
            min_fre = _fre
            min_fre_part = _part
            
        if _cond_coarse < min_cond:
            min_cond = _cond_coarse
            min_cond_part = _part

        if _res < min_res:
            min_res = _res
            min_res_part = _part

    return min_fre, min_fre_part, min_cond, min_cond_part, min_res, min_res_part


def generate_test_case(test_case, a_fine, b_fine, c_fine, d_fine, x_fine, *main_args):
    N_fine = len(a_fine)
    if test_case == 'random_unif' or test_case == 'random_norm':
        generator = main_random(N_fine, a_fine, b_fine, c_fine, d_fine, x_fine, *main_args)
        # [x_fine_rptapp, fre, res, mtx_coarse, mtx_cond_coarse, rpta_partition]
        extractor = lambda sample : sample[0:6]

    elif test_case == 'reduce':
        generator = main_cond_coarse(N_fine, a_fine, b_fine, c_fine, d_fine, x_fine, *main_args)
        # [x_fine_rptapp, fre, res, mtx_coarse, mtx_cond_coarse, rpta_partition]
        extractor = lambda sample : sample[0:6]
    
    elif test_case == 'static':
        generator = main_static(N_fine, a_fine, b_fine, c_fine, d_fine, x_fine, *main_args)
        # [x_fine_rptapp, fre, res, mtx_coarse, mtx_cond_coarse, rpta_partition]
        extractor = lambda sample : sample[0:6]

    else:
        raise ValueError('unknown test case')

    return generate_min_partition(generator, extractor)    


# XXX: generalization of main_* which takes a partition as argument
def main_partition(a_fine, b_fine, c_fine, d_fine, x_fine, rpta_partition, pivoting, use_symmetric):
    if use_symmetric is True:
        x_fine_rptapp, mtx_coarse, mtx_cond_coarse = symmetric.rpta_symmetric(
            a_fine, b_fine, c_fine, d_fine, rpta_partition, pivoting=pivoting)
    else:
        x_fine_rptapp, mtx_coarse, mtx_cond_coarse = rpta.reduce_and_solve(
            a_fine, b_fine, c_fine, d_fine, rpta_partition, pivoting=pivoting)

    if x_fine_rptapp is not None:
        fre = np.linalg.norm(x_fine_rptapp - x_fine) / np.linalg.norm(x_fine)
        Ax = matrix.bands_mv(a_fine, b_fine, c_fine, x_fine_rptapp)
        res = np.linalg.norm(Ax - d_fine) / np.linalg.norm(d_fine)
    else:
        fre = np.Inf
        res = np.Inf

    return x_fine_rptapp, fre, res, mtx_coarse, mtx_cond_coarse


# TODO: allow to choose the distribution of the generated solutions
def run_trials(mtx, a_fine, b_fine, c_fine, part, label, gen_samples, 
               n_trials=5000, pivoting='scaled_partial', use_symmetric=False):
    trials = [None]*n_trials
    N_fine = len(a_fine)

    for k in range(0, n_trials):
        x_fine_new = gen_samples(N_fine)
        d_fine_new = np.matmul(mtx, x_fine_new)
        
        # Solve linear system with new right-hand side
        x_fine_rptapp_new, fre_new, res_new, mtx_coarse_new, mtx_cond_coarse_new = main_partition(
            a_fine, b_fine, c_fine, d_fine_new, x_fine_new, part, pivoting, use_symmetric)
        
        if k % 20 == 0:
            print("trial #{}, {}".format(k, label))
        #trials[k] = fre_new
        # Right-hand sides are generated by matrix multiplication with a set of random vectors. 
        # Thus when the condition of the coefficient matrix varies, the right-hand sides may be 
        # distributed differently and the trials are not directly comparable. To avoid this, 
        # store the (relative) residual as the trial result.
        trials[k] = res_new

    return trials


def ecdf(a):
    x, counts = np.unique(a, return_counts=True) # returns sorted unique elements
    cumsum = np.cumsum(counts)

    return x, cumsum / cumsum[-1]


def plot_ecdf(d, filename=None):
    plt.clf()

    for label, a in d.items():
        x, y = ecdf(a)
        x = np.insert(x, 0, x[0])
        y = np.insert(y, 0, 0.)
        plt.plot(x, y, drawstyle='steps-post', label=label)

    plt.legend()
    plt.grid(True)

    if filename is not None:
        plt.savefig(filename)

# def P(trial, lt):
#     arr = ecdf(trial)
#     return arr[0][arr[1] <= lt]

# TODO: include additional arguments for generate_test_case()
def main():
    parser = argparse.ArgumentParser(description='Retrieve arguments')
    # positional arguments
    parser.add_argument("mtx_id", type=str, help="file name of matrix (.mtx)")
    parser.add_argument("N_fine", type=int)
    parser.add_argument("M", type=int, help="fixed block size for comparison purposes")
    # global options
    parser.add_argument("--seed", type=int, default=0, help="value for np.random.seed()")
    parser.add_argument("--n-trials", type=int, default=5000, help="amount of trials for generated partition")
    parser.add_argument("--mean", type=float, default=3, help="mean of generated solutions (--distribution normal)")
    parser.add_argument("--stddev", type=float, default=1, help="standard deviation of generated solutions (--distribution normal)")
    parser.add_argument("--low", type=float, default=0, help="lower boundary of generated solutions (--distribution uniform)")
    parser.add_argument("--high", type=float, default=1, help="upper boundary of generated solutions (--distribution uniform)")
    parser.add_argument("--distribution", type=str, default='normal', help="distribution of generated solutions ('normal' or 'uniform')")
    parser.add_argument("--distribution-setup", type=str, default='normal', help="distribution for solution of generated partition")
    parser.add_argument("--pivoting", type=str, default='scaled_partial', help="type of pivoting employed ('none', 'partial' or 'scaled_partial'")
    parser.add_argument("--symmetric", action='store_true', help="alternative substitution method")
    # options for partition based on condition of coarse system
    parser.add_argument("--cond-lo-min", type=int, default=16)
    parser.add_argument("--cond-lo-max", type=int, default=41)
    parser.add_argument("--cond-hi-min", type=int, default=22)
    parser.add_argument("--cond-hi-max", type=int, default=73)
    parser.add_argument("--cond-min-part", type=int, default=6)
    # options for random partition
    parser.add_argument("--rand-n-samples", type=int, default=1000, help="amount of samples for randomly generated partitions")
    parser.add_argument("--rand-min-part", type=int, default=32, help="minimal size of randomly generated partitions")
    parser.add_argument("--rand-max-part", type=int, default=100, help="maximal size of randomly generated partitions")
    parser.add_argument("--rand-mean", type=float, default=None, help="mean of normal distributed partitions)")
    parser.add_argument("--rand-sd", type=float, default=2, help="standard deviation of normal distributed partitions")
    # options for static partition
    parser.add_argument("--static-M-min", type=int, default=16, help="minimal block size for fixed partitions")
    parser.add_argument("--static-M-max", type=int, default=64, help="maximal block size for fixed partitions")
    parser.add_argument("--static-min-part", type=int, default=6, help="minimal size of remainder block")
    # TODO: options for partition generated during reduction

    args = parser.parse_args()
    np.random.seed(args.seed)
    plt.rcParams["figure.figsize"] = (12,8)

    # Set mean partition size based on defined min/max size
    if args.rand_mean is None:
        args.rand_mean = np.floor((args.rand_max_part - args.rand_min_part) / 2)

    # Define distribution of generated solutions
    if args.distribution == "normal":
        gen_samples = lambda N : np.random.normal(args.mean, args.stddev, N)
        print("[SOL] Normal distribution with mean {}, standard deviation {}".format(args.mean, args.stddev), file=stderr)
    elif args.distribution == "uniform":
        gen_samples = lambda N : np.random.uniform(args.low, args.high, N)
        print("[SOL] Uniform distribution with values lower bound {}, upper bound {}".format(args.low, args.high))
    else:
        raise ValueError("invalid distribution specified (--distribution)")
    
    # Define distribution of sample used to generate partition
    if args.distribution_setup == "normal":
        gen_samples_part = lambda N : np.random.normal(args.mean, args.stddev, N)
        print("[PART] Normal distribution with mean {}, standard deviation {}".format(args.mean, args.stddev), file=stderr)
    elif args.distribution_setup == "uniform":
        gen_samples_part = lambda N : np.random.uniform(args.low, args.high, N)
        print("[PART] Uniform distribution with values lower bound {}, upper bound {}".format(args.low, args.high))
    else:
        raise ValueError("invalid distribution specified (--distribution-setup)")
    
    
    # Set up linear system
    a_fine, b_fine, c_fine, x_fine, d_fine, mtx = setup(args.mtx_id, args.N_fine, gen_samples_part)

    # Comparison to static partition with fixed M
    # XXX: always use non-symmetric substitution for this?
    static = [S for S in main_static(
        len(a_fine), a_fine, b_fine, c_fine, d_fine, x_fine, [args.M], 6, 
        args.pivoting, args.symmetric)]
    static_part = static[0][5]
    # static_fre, static_part = static[0][2], static[0][5]


    # Verify generated partition on a set of samples (x, from same distribution)
    # and store the relative residual for each solution
    trials_static = run_trials(
        mtx, a_fine, b_fine, c_fine, static_part, "static", gen_samples, 
        args.n_trials, args.pivoting, args.symmetric)

    # Generate dynamic partition from one sample
    print("Generating test case: static", file=sys.stderr)
    _, _, min_cond_static, min_cond_static_part, min_res_static, min_res_static_part = generate_test_case(
        'static', a_fine, b_fine, c_fine, d_fine, x_fine, 
        list(range(args.static_M_min, args.static_M_max+1)), args.static_min_part, 
        args.pivoting, args.symmetric)

    trials_static_cond = run_trials(
        mtx, a_fine, b_fine, c_fine, min_cond_static_part, "static + cond", gen_samples, 
        args.n_trials, args.pivoting, args.symmetric)

    trials_static_res = run_trials(
        mtx, a_fine, b_fine, c_fine, min_res_static_part, "static + res", gen_samples, 
        args.n_trials, args.pivoting, args.symmetric)


    print("Generating test case: random_unif", file=sys.stderr)
    # [min_fre, min_fre_part, min_cond, min_cond_part, min_res, min_res_part]
    _, _, min_cond_rand_unif, min_cond_rand_unif_part, min_res_rand_unif, min_res_rand_unif_part = generate_test_case(
        'random_unif', a_fine, b_fine, c_fine, d_fine, x_fine, 
        args.rand_n_samples, 'uniform', args.rand_min_part, args.rand_max_part, 
        args.rand_mean, args.rand_sd, 
        args.pivoting, args.symmetric)
    
    trials_rand_cond_unif = run_trials(
        mtx, a_fine, b_fine, c_fine, min_cond_rand_unif_part, "random_unif + cond", gen_samples, 
        args.n_trials, args.pivoting, args.symmetric)

    trials_rand_res_unif = run_trials(
        mtx, a_fine, b_fine, c_fine, min_res_rand_unif_part, "random_unif + res", gen_samples, 
        args.n_trials, args.pivoting, args.symmetric)
    
    
    print("Generating test case: random_norm", file=sys.stderr)
    _, _, min_cond_rand_norm, min_cond_rand_norm_part, min_res_rand_norm, min_res_rand_norm_part = generate_test_case(
        'random_norm', a_fine, b_fine, c_fine, d_fine, x_fine, 
        args.rand_n_samples, 'normal', args.rand_min_part, args.rand_max_part, 
        args.rand_mean, args.rand_sd, 
        args.pivoting, args.symmetric)

    trials_rand_cond_norm = run_trials(
        mtx, a_fine, b_fine, c_fine, min_cond_rand_norm_part, "random_norm + cond", gen_samples, 
        args.n_trials, args.pivoting, args.symmetric)

    trials_rand_res_norm = run_trials(
        mtx, a_fine, b_fine, c_fine, min_res_rand_norm_part, "random_norm + res", gen_samples, 
        args.n_trials, args.pivoting, args.symmetric)
    
    
    print("Generating test case: reduce", file=sys.stderr)
    _, _, min_cond_reduce, min_cond_reduce_part, min_res_reduce, min_res_reduce_part = generate_test_case(
        'reduce', a_fine, b_fine, c_fine, d_fine, x_fine,
        list(range(args.cond_lo_min, args.cond_lo_max+1)),
        list(range(args.cond_hi_min, args.cond_hi_max+1)), args.cond_min_part, 
        args.pivoting, args.symmetric)

    trials_reduce_cond = run_trials(
        mtx, a_fine, b_fine, c_fine, min_cond_reduce_part, "reduce + cond", gen_samples, 
        args.n_trials, args.pivoting, args.symmetric)

    trials_reduce_res = run_trials(
        mtx, a_fine, b_fine, c_fine, min_res_reduce_part, "reduce + res", gen_samples, 
        args.n_trials, args.pivoting, args.symmetric)
    
    
    # Plot empirical cumulative distribution
    trials_d = {
        'rand_min_cond_unif' : trials_rand_cond_unif,
        'rand_min_res_unif'  : trials_rand_res_unif,
        'rand_min_cond_norm' : trials_rand_cond_norm,
        'rand_min_res_norm'  : trials_rand_res_norm,
        'reduce_min_cond'    : trials_reduce_cond,
        'reduce_min_res'     : trials_reduce_res,
        'static_min_cond'    : trials_static_cond,
        'static_min_res'     : trials_static_res,
        'static_M32'         : trials_static
    }

    # Use a common suffix which includes the distribution and matrix ID
    f_suffix = "{}_{}_sol-{}_gen-{}".format(
        args.mtx_id, args.N_fine, args.distribution[0:4], args.distribution_setup[0:4])
    plot_ecdf(trials_d, "ecdf_{}".format(f_suffix))

    # Write trial data to file (JSON) for later use
    # TODO: write file after each series has completed
    with open('trials_{}.json'.format(f_suffix), 'w') as outfile:
        json.dump(trials_d, outfile)


if __name__ == "__main__":
    main()
